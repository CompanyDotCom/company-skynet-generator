service: <%- serviceName %>

plugins:
  - serverless-webpack

package:
  individually: true

########## CUSTOM PARAMETERS ##########
custom:
  config: ${file(env.yml)}
  stage: ${opt:stage, self:provider.stage}
  region: ${opt:region, self:provider.region}
  accountId: ${opt:accountId, self:provider.accountId}
  webpack:
    includeModules:
      forceExclude:
        - aws-sdk

########## PROVIDER CONFIGURATION ##########
provider:
  name: aws
  runtime: nodejs10.x
  stage: dev
  region: us-east-1
  accountId: 811255529278
  environment: ${self:custom.config.${self:custom.stage}}
  timeout: 900
  versionFunctions: false
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:*"
      Resource:
        - "arn:aws:dynamodb:${self:custom.region}:${self:custom.config.accountId}:table/apiCallCount"
        - "arn:aws:dynamodb:${self:custom.region}:${self:custom.config.accountId}:table/Account"
        - "arn:aws:dynamodb:${self:custom.region}:${self:custom.config.accountId}:table/vendorConfig"
    - Effect: "Allow"
      Action:
        - "sqs:GetQueueAttributes"
        - "sqs:ReceiveMessage"
        - "sqs:DeleteMessage"
      Resource:
        - "arn:aws:sqs:${self:custom.region}:${self:custom.config.accountId}:${self:custom.config.service}-fetchq"
        - "arn:aws:sqs:${self:custom.region}:${self:custom.config.accountId}:${self:custom.config.service}-directtq"
        - "arn:aws:sqs:${self:custom.region}:${self:custom.config.accountId}:${self:custom.config.service}-bulktq"
    - Effect: "Allow"
      Action:
        - "sqs:SendMessage"
      Resource:
        - "arn:aws:sqs:${self:custom.region}:${self:custom.config.accountId}:${self:custom.config.service}-ldlq"
    - Effect: Allow
      Action:
        - "sns:Publish"
        - "sns:Subscribe"
      Resource:
        - "arn:aws:sns:${self:custom.region}:${self:custom.config.accountId}:event-bus"

########## FUNCTIONS CONFIGURATION ##########
functions:
  setupDatabase:
    handler: handler.setupDatabase
  directFetch:
    handler: handler.fetchHandler
    events:
      - sqs:
          arn: "arn:aws:sqs:${self:custom.region}:${self:custom.config.accountId}:${self:custom.config.service}-fetchq"
          enabled: true
          batchSize: 1
    # CR: Mickey to use package: individually option correctly and have us gain anything from it need to include below:
    package:
      include:
        - node_modules/
        - workers/fetchWorker.js
      exclude:
        - workers/transitionWorker.js
        # probably some helper file.  If we're going to do this might want to change file structure to have fetch and transition directories
    # to tell serverless which files are needed for each package. See: https://serverless.com/framework/docs/providers/aws/guide/packaging/  #Packaging functions separately
    # not sure if this has any strange interaction with webpack
  directTransition:
    handler: handler.directTransitionHandler
    events:
      - sqs:
          arn: "arn:aws:sqs:${self:custom.region}:${self:custom.config.accountId}:${self:custom.config.service}-directtq"
          enabled: true
          batchSize: 1<%- bulkHandler %>

########## RESOURCES CONFIGURATION ##########
resources:
  Resources:
    dlqCreate:
      Type: "AWS::SQS::Queue"
      Properties:
        DelaySeconds: 0
        MaximumMessageSize: 262144
        MessageRetentionPeriod: 345600
        QueueName: "${self:custom.config.service}-dlq"
        ReceiveMessageWaitTimeSeconds: 0
        VisibilityTimeout: 0
    ## CR: Mickey: I worry about the sustainability of having 2 dlqs for every vendor service.  Is anyone/anything going to be monitoring them?
    ##    Or are they just all going to exist and we set alarms for if the number of messages in any of the spikes so we know to check on their associated handlers?
    ldlqCreate:
      Type: "AWS::SQS::Queue"
      Properties:
        DelaySeconds: 0
        MaximumMessageSize: 262144
        MessageRetentionPeriod: 345600
        QueueName: "${self:custom.config.service}-ldlq"
        ReceiveMessageWaitTimeSeconds: 0
        VisibilityTimeout: 0
    fetchQCreate:
      Type: "AWS::SQS::Queue"
      Properties:
        DelaySeconds: 0
        MaximumMessageSize: 262144
        MessageRetentionPeriod: 345600
        QueueName: "${self:custom.config.service}-fetchq"
        ReceiveMessageWaitTimeSeconds: 0
        VisibilityTimeout: 900
        RedrivePolicy:
          deadLetterTargetArn:
            Fn::GetAtt:
              - "dlqCreate"
              - "Arn"
          maxReceiveCount: 2 ## CR: Mickey: any reason for the different maxReceiveCounts for fetch and transition?
    directTQCreate:
      Type: "AWS::SQS::Queue"
      Properties:
        DelaySeconds: 0
        MaximumMessageSize: 262144
        MessageRetentionPeriod: 345600
        QueueName: "${self:custom.config.service}-directtq"
        ReceiveMessageWaitTimeSeconds: 0
        VisibilityTimeout: 900
        RedrivePolicy:
          deadLetterTargetArn:
            Fn::GetAtt:
              - "dlqCreate"
              - "Arn"
          maxReceiveCount: 3
    bulkQCreate:
      Type: "AWS::SQS::Queue"
      Properties:
        DelaySeconds: 0
        MaximumMessageSize: 262144
        MessageRetentionPeriod: 345600
        QueueName: "${self:custom.config.service}-bulktq"
        ReceiveMessageWaitTimeSeconds: 0
        VisibilityTimeout: 900
        RedrivePolicy:
          deadLetterTargetArn:
            Fn::GetAtt:
              - "dlqCreate"
              - "Arn"
          maxReceiveCount: 10
    subscribeFSQSToTriggerSns:
      Type: "AWS::SNS::Subscription"
      Properties:
        TopicArn: "arn:aws:sns:${self:custom.region}:${self:custom.config.accountId}:event-bus"
        Endpoint: "arn:aws:sqs:${self:custom.region}:${self:custom.config.accountId}:${self:custom.config.service}-fetchq"
        Protocol: sqs
        FilterPolicy:
          status:
            - "trigger"
          entityId:
            - ${self:custom.config.productId}
          eventType:
            - "fetch"
    subscribeDTSQSToTriggerSns:
      Type: "AWS::SNS::Subscription"
      Properties:
        TopicArn: "arn:aws:sns:${self:custom.region}:${self:custom.config.accountId}:event-bus"
        Endpoint: "arn:aws:sqs:${self:custom.region}:${self:custom.config.accountId}:${self:custom.config.service}-directtq"
        Protocol: sqs
        FilterPolicy:
          status:
            - "trigger"
          entityId:
            - ${self:custom.config.productId}
          eventType:
            - "transition"
          requestQuantity:
            - "single"
            - "exists": false
    subscribeBTSQSToTriggerSns:
      Type: "AWS::SNS::Subscription"
      Properties:
        TopicArn: "arn:aws:sns:${self:custom.region}:${self:custom.config.accountId}:event-bus"
        Endpoint: "arn:aws:sqs:${self:custom.region}:${self:custom.config.accountId}:${self:custom.config.service}-bulktq"
        Protocol: sqs
        FilterPolicy:
          status:
            - "trigger"
          entityId:
            - ${self:custom.config.productId}
          eventType:
            - "transition"
          requestQuantity:
            - "bulk"
    SqsQueuePolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal: "*"
              Action: sqs:SendMessage
              Resource: "*"
              Condition:
                ArnEquals:
                  "aws:SourceArn":
                    - Fn::Join:
                        - ":"
                        - - "arn:aws:sns"
                          - ${self:custom.region}
                          - ${self:custom.config.accountId}
                          - "event-bus"
        Queues:
          - Ref: fetchQCreate
          - Ref: directTQCreate
          - Ref: bulkQCreate
